version: 1.0

description: Send emails to users regarding vulnerabilities on VMs associated with them

input:
  - db_file_path
  - email_from
  - footer
  - header
  - subject
  - smtp_account
  - attachments_tmp_dir_path
  - send_html
  - admin_override
  - admin_override_email
vars:
  - all_user_ids: null
  - body_list: null
  - email_list: null
  - attachment_file_path: null
  - stdout: null
  - stderr: null

output:
  - stdout: <% ctx().stdout %>
  - stderr: <% ctx().stderr %>

tasks:
  #get all users with vulnerabilities on active VMs shown in greenbone
  get_user_ids:
    action: stackstorm_greenbone.get.all.user.ids
    next:
      - when: <% succeeded() %>
        publish:
          - all_user_ids: <% result().result %>
        do:
          # run following tasks in parallel
          - get_user_info
          - create_attachment_files
          - get_email_addresses
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
        do: fail

  # populate vulnerability email message body for each user found (in parallel)
  get_user_info:
    with: <% ctx(all_user_ids) %>
    action: stackstorm_greenbone.get.info.for.user
      user_id=<% item() %>
      get_html=<% ctx().send_html %>
    next:
      - when: <% result().result != "query resulted in no output" %>
        publish:
          - body_list: <% result().result %>
        do:
          - send_email
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
        do: fail

  # create csv attachment files for each user found (in parallel)
  create_attachment_files:
    with: <% ctx(all_user_ids) %>
    action: stackstorm_greenbone.create.csv.file
      user_id=<% item() %>
      dir_path=<% ctx().attachments_tmp_dir_path %>
    next:
      - when: <% succeeded() %>
        publish:
          - attachment_list: <% result().result %>
        do:
          - send_email
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
        do: fail

  # get email addresses for each user found using openstack (in parallel)
  get_email_addresses:
    with: <% ctx(all_user_ids) %>
    action: stackstorm_openstack.user.get.email
      user=<% item() %>
    next:
      - when: <% succeeded() %>
        publish:
          - email_list: <% result().result %>
        do:
          - send_email
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
        do: fail

  # populate and send emails to each user (in parallel)
  send_email:
    # wait until all previous tasks are completed
    join: all
    with: email, body, attachment_file_path in <% zip(ctx(email_list), ctx(body_list), ctx(attachment_list)) %>
    action: stackstorm_send_notifications.send.email
      admin_override=<% ctx().admin_override %>
      admin_override_email=<% ctx().admin_override_email %>
      send_as_html=<% ctx().send_html %>
      smtp_account=<% ctx().smtp_account %>
      email_to=<% list(item(email)) %>
      email_from=<% ctx().email_from %>
      body=<% item(body) %>
      subject=<% ctx().subject %>
      footer=<% ctx().footer %>
      header=<% ctx().header %>
      attachment_filepaths=<% list(item(attachment_file_path)) %>
    #action: core.echo message="email <% list(item(email)) %> attachment <% list(item(attachment_file_path)) %>"
    next:
      - when: <% succeeded() %>
        publish:
          - stdout: <% result().stdout %>
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
        do: fail